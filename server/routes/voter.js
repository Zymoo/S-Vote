/**
 *
 * Defines public interface for voters.
 *
 */

const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const database = require('../utilities/database');
const chain = require('../utilities/chain');

/* Debug purpose - sanity check */
router.get('/', function(req, res, next) {
  res.send(req.app.locals.welcome);
});

/**
 * Registration - requires confirmation through IDnow.
 * Sends back an authentication token, or FAIL
 * in case of failed identity confirmation.
 * @returns {token}
 */
router.post('/register', function(req, res, next) {
  // In the future this token will be generated by IDnow (or alternative).
  const token = jwt.sign({ip: req.ip},
      req.app.locals.token, {expiresIn: '600 s'});
  res.json(token);
});

// eslint-disable-next-line require-jsdoc
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (token == null) return res.sendStatus(401);

  jwt.verify(token, (req.app.locals.token).toString(), (err, decoded) => {
    console.log(err);
    if (err) return res.sendStatus(403);
    next();
  });
}

/**
 * Saves given public key on a blockchain after validation of user's token.
 * Sends back status OK or FAIL.
 * @param {token}
 * @param {pubKey}
 * @returns {status}
 */
router.post('/keysave', authenticateToken, async function(req, res, next) {
  const pubKey = req.body.pubKey;
  if (req.app.locals.dbsave) {
    await database.saveVoterKey(pubKey);
  } else {
    await chain.saveVoterKey(pubKey);
  }
  res.send('Passed authentication & saved key on the blockchain');
});

module.exports = router;
